(ns cljd.flutter.alpha2
  (:require ["package:flutter/widgets.dart" :as widgets]
            ["package:flutter/foundation.dart" :as foundation]
            ["dart:async" :as dart:async]
            [cljd.string :as str])
  (:host-ns
   (:require [clojure.string :as str])))

(defprotocol Subscribable
  (-subscribe [x f! opts]
    "Subscribe to updates on x.
     opts is a map of keyword-keyed options
     (keyword must be namespaced except for default)
     f! is a side-effecting function of one argument.
     Returns a subscription.")
  (-unsubscribe [x sub] "Cancels the provided subscription."))

(extend-protocol Subscribable
  cljd.core/Atom
  (-subscribe [a f _]
    (let [cb (fn [_ _ _ new-state] (f new-state))]
      (f @a)
      (add-watch a cb cb)
      cb))
  (-unsubscribe [a cb]
    (remove-watch a cb))
  Stream
  (-subscribe [s f opts]
    (let [{:keys [default]} opts]
      (f default))
    (.listen s (fn [x] (f x) nil) .cancelOnError true))
  (-unsubscribe [s sub]
    (.cancel ^dart:async/StreamSubscription sub))
  Future
  (-subscribe [future f opts]
    (let [sub (volatile! true)
          {:keys [default :future/on-error]} opts]
      (f default)
      (.then future
        #(when @sub (f %))
        .onError
        (when on-error
          (fn [e ... st]
            (when @sub
              (let [v (await (on-error default e st))]
                (when-not (identical? v default) (f v)))))))
      sub))
  (-unsubscribe [s sub]
    (vreset! sub false))
  ; TODO & check if we handle partial order on protocols dispatch
  foundation/ValueListenable
  (-subscribe [vl f _]
    (f (.-value vl))
    (doto #(f (.-value vl))
      (->> (.addListener vl))))
  (-unsubscribe [vl listener]
    (.removeListener vl listener))
  foundation/Listenable
  (-subscribe [l f opts]
    (let [{:keys [default] :or {default true}} opts]
      (f default)
      (doto #(f true)
        (->> (.addListener l)))))
  (-unsubscribe [l listener]
    (.removeListener l listener)))

(defprotocol RefreshableBindings
  (-keys-and-builders [widget]
    "Returns a dart list of interleaved refreh keys and builders (thunks)"))

(defprotocol IModel
  (-state [v args swp! trck!] "Returns a mutable view of this binding in this context.")
  (-updated? [v prev-v q])
  (-update [v f]))

(deftype AssociativeState [v path swp! trck!]
  cljd.core/IDeref
  (-deref [_]
    (trck! path)
    v)
  cljd.core/ISwap
  (-swap! [o f]
    (swp! (if (seq path) #(update-in % path f) f)))
  (-swap! [o f a]
    (swp! (if (seq path) #(update-in % path f a) #(f % a))))
  (-swap! [o f a b]
    (swp! (if (seq path) #(update-in % path f a b) #(f % a b))))
  (-swap! [o f a b xs]
    (swp! (if (seq path) #(apply update-in % path f a b xs) #(apply f % a b xs))))
  cljd.core/IReset
  (-reset! [o v']
    (swp! (if (seq path) #(assoc-in % path v') (constantly v'))))
  cljd.core/ILookup
  (-lookup [o k]
    (AssociativeState. (-lookup v k) (conj path k) swp! trck!))
  (-lookup [o k not-found]
    (AssociativeState. (-lookup v k not-found) (conj path k) swp! trck!))
  (-contains-key? [o k]
    (trck! (conj path k))
    (contains? v k)))

(deftype AssociativeModel [v]
  IModel
  (-state [model args swp! trck!]
    (AssociativeState. (get-in v args) args swp! trck!))
  (-updated? [model prev-model ks] (not= (get-in v ks) (get-in (.-v ^AssociativeModel prev-model) ks)))
  (-update [_ f] (AssociativeModel. (f v))))

(defn ensure-model [x]
  (if (satisfies? IModel x) x (AssociativeModel. x)))

(deftype StaticModel [v]
  IModel
  (-state [model args swp! trck!] (trck! args) (get-in v args))
  (-updated? [model prev-model ks] (not= (get-in v ks) (get-in (.-v ^StaticModel prev-model) ks))))

(defn static
  "Returns a value model (not derefable, not updatable)."
  [v]
  (StaticModel. v))

(deftype InheritedBindings [state pctx snapshot child]
  :extends (widgets/InheritedModel. .child child)
  (isSupportedAspect [this name]
    (contains? snapshot name))
  (updateShouldNotify [this prev-this]
    (not= snapshot (.-snapshot ^InheritedBindings prev-this)))
  (updateShouldNotifyDependent [this prev-this aspects]
    (let [prev-snapshot (.-snapshot ^InheritedBindings prev-this)]
      (boolean
        (some (fn [[name q]]
                (-updated? (snapshot name) (prev-snapshot name) q)) aspects)))))

(defn get-state-of [^widgets/BuildContext ctx id args]
  (loop [^widgets/BuildContext ctx' ctx]
    (if-some [elt (#/(.getElementForInheritedWidgetOfExactType InheritedBindings) ctx')]
      (let [ib ^InheritedBindings (.-widget elt)]
        (if (.isSupportedAspect ib id)
          (-state (get (.-snapshot ib) id) args
            #(swap! (.-state ib) update id -update %)
            #(.dependOnInheritedElement ctx elt .aspect [id %]))
          (recur (.-pctx ib))))
      (throw (Exception (str "No inherited state for id" id))))))

(defn- ^:macro-support parse-bindings-with-options
  "Returns a collection of [binding expr options-map]."
  [bindings supported-option?]
  (let [triples
        (reduce
         (fn [v [l r]]
           (cond
             (not (keyword? l))
             (conj v [l r {}])
             (supported-option? l)
             (conj (pop v) (update (peek v) 2 assoc l r))
             :else (throw (Exception. (str "Unsupported option: " l)))))
         [] (partition 2 bindings))]
    triples))

(defmacro nest
  "Threading macro for nesting widgets.
  Starting from the end each form is nested in the previous one as a .child named argument."
  [form & forms]
  (let [[form & forms] (reverse (cons form forms))]
    `(->> ~form ~@(for [form forms] (-> form (cond-> (symbol? form) list) (concat  ['.child]) (with-meta (meta form)))))))

(defn- ^:macro-support camel-kebab [s]
  (str/replace s #"(^[A-Z])|[A-Z]" (fn [[s start]] (cond->> (str/lower-case s) (not start) (str "-")))))

(def ^:private ^:macro-support closest-context `context#)

(def ^:macro-support expand-build-expr nil)

(defn ^:macro-support expand-watch [v opts body]
  (let [watches (parse-bindings-with-options v
                  #(or (qualified-keyword? %) (#{:default :refresh-on})))
        {refreshable-watches true
         non-refreshable-watches false}
        (group-by (fn [[_ _ opts]] (contains? opts :refresh-on)) watches)
        Nr (count refreshable-watches)
        N (count watches)
        ; slots has 3*N items
        ; first N current vals
        ; then 2*N interleaved subscribable and subscription
        ; the order is refreshable first then non-refreshable
        slots `slots#
        state-sym `state#
        keys-and-builders `keys-and-builders#
        new-kbs `new-kbs#
        old-kbs `old-kbs#
        init1
        (fn [i expr sub-opts]
          `(let [subscribable# ~expr]
             (doto ~slots
               (aset ~(+ N (* 2 i)) subscribable#)
               (aset ~(+ N (* 2 i) 1)
                 (-subscribe subscribable#
                   (fn [x#]
                     (.setState ~state-sym (fn [] (aset ~slots ~i x#))))
                   ~sub-opts)))))
        dispose1 (fn [i]
                   `(let [subscribable# (aget ~slots ~(+ N (* 2 i)))
                          sub# (aget ~slots ~(+ N (* 2 i) 1))]
                      (-unsubscribe subscribable# sub#)))]
    `(let [~keys-and-builders
           (doto (List/filled ~(* 2 Nr) nil)
             ~@(mapcat
                 (fn [[_ subscribable opts] i]
                   `[(aset ~(* 2 i) ~(:refresh-on opts))
                     (aset ~(inc (* 2 i)) (fn [] ~subscribable))])
                 refreshable-watches
                 (range)))]
       (reify :extends widgets/StatefulWidget
         :no-meta true
         (~'createState [_#]
          (let [~slots (List/filled ~(* 3 N) nil)]
            (reify :extends widgets/State
              :no-meta true
              (~'initState [~state-sym]
               (.initState ~(vary-meta state-sym assoc :tag 'super))
               ~@(map-indexed
                   (fn [i [binding subscribable sub-opts]]
                     (init1 i subscribable (dissoc sub-opts :refresh-on)))
                   (concat refreshable-watches non-refreshable-watches))
               nil)
              (~'didUpdateWidget [~state-sym old-widget#]
               (.didUpdateWidget ~(vary-meta state-sym assoc :tag 'super) old-widget#)
               (let [~new-kbs (-keys-and-builders (.-widget ~state-sym))
                     ~old-kbs (-keys-and-builders old-widget#)]
                 ~@(map-indexed
                     (fn [i [_ _ sub-opts]]
                       `(when-not (= (aget ~new-kbs ~(* 2 i))
                                    (aget ~old-kbs ~(* 2 i)))
                          ~(dispose1 i)
                          ~(init1 i `((aget ~new-kbs ~(inc (* 2 i))))
                             (dissoc sub-opts :refresh-on))))
                     refreshable-watches))
               nil)
              (~'dispose [~state-sym]
               ~@(map dispose1 (range N))
               (.dispose ~(vary-meta state-sym assoc :tag 'super)))
              (~'build [~state-sym ~closest-context]
               (let [~@(mapcat
                         (fn [[binding subscribable] i]
                           [binding `(aget ~slots ~i)])
                         watches (range))]
                 ~(expand-build-expr opts body))))))
         cljd.flutter.alpha2/RefreshableBindings
         (~'-keys-and-builders [_#] ~keys-and-builders)))))

(defn ^:macro-support expand-resources [v opts body]
  (let [resources (parse-bindings-with-options v #{:dispose :refresh-on})
        {refreshable-resources true
         non-refreshable-resources false}
        (group-by (fn [[_ _ opts]] (contains? opts :refresh-on)) resources)
        Nr (count refreshable-resources)
        N (count resources)
        slots `slots#
        state-sym `state#
        keys-and-builders `keys-and-builders#
        new-kbs `new-kbs#
        old-kbs `old-kbs#
        init1
        (fn [i expr]
          `(let [resource# ~expr]
             (aset ~slots ~i resource#)))
        dispose1 (fn [i [_ resource res-opts]]
                   `(-> (aget ~slots ~i) (dart/type-like ~resource) ~(:dispose res-opts '.dispose)))]
    `(let [~keys-and-builders
           (doto (List/filled ~(* 2 Nr) nil)
             ~@(mapcat
                 (fn [[_ resource opts] i]
                   `[(aset ~(* 2 i) ~(:refresh-on opts))
                     (aset ~(inc (* 2 i)) (fn [] ~resource))])
                 refreshable-resources
                 (range)))]
       (reify :extends widgets/StatefulWidget
         :no-meta true
         (~'createState [_#]
          (let [~slots (List/filled ~N nil)]
            (reify :extends widgets/State
              :no-meta true
              (~'initState [~state-sym]
               (.initState ~(vary-meta state-sym assoc :tag 'super))
               ~@(map-indexed
                   (fn [i [binding resource sub-opts]]
                     (init1 i resource))
                   (concat refreshable-resources non-refreshable-resources))
               nil)
              (~'didUpdateWidget [~state-sym old-widget#]
               (.didUpdateWidget ~(vary-meta state-sym assoc :tag 'super) old-widget#)
               (let [~new-kbs (-keys-and-builders (.-widget ~state-sym))
                     ~old-kbs (-keys-and-builders old-widget#)]
                 ~@(map-indexed
                     (fn [i res]
                       `(when-not (= (aget ~new-kbs ~(* 2 i))
                                    (aget ~old-kbs ~(* 2 i)))
                          ~(dispose1 i res)
                          ~(init1 i `((aget ~new-kbs ~(inc (* 2 i)))))))
                     refreshable-resources))
               nil)
              (~'dispose [~state-sym]
               ~@(map-indexed dispose1 (concat refreshable-resources non-refreshable-resources))
               (.dispose ~(vary-meta state-sym assoc :tag 'super)))
              (~'build [~state-sym ~closest-context]
               (let [~@(mapcat
                         (fn [[binding resource] i]
                           [binding `(dart/type-like (aget ~slots ~i) ~resource)])
                         resources (range))]
                 ~(expand-build-expr opts body))))))
         cljd.flutter.alpha2/RefreshableBindings
         (~'-keys-and-builders [_#] ~keys-and-builders)))))

(defn ^:macro-support expand-get-inherited [v opts body]
  (let [inherit (if (vector? v) {:of v} v)
        inherit (if-some [shortcuts (:of inherit)]
                  (into (dissoc inherit :of)
                    (map (fn [type-or-kw]
                           (let [hint (cond-> type-or-kw (seq? type-or-kw) first)]
                             [(symbol
                                (if (keyword? hint)
                                  (name hint)
                                  (camel-kebab (re-find #"[^.]+$" (name hint)))))
                              type-or-kw])))
                    shortcuts)
                  inherit)
        inherits-bindings
        (mapcat
          (fn [[sym type-or-kw]]
            (let [[type-or-kw & args] (cond-> type-or-kw (not (seq? type-or-kw)) list)]
              [sym
               (if (keyword? type-or-kw)
                 `(get-state-of ~closest-context ~type-or-kw ~(vec args))
                 (list*
                   (symbol
                     (if-some [ns (namespace type-or-kw)]
                       (str ns "." (name type-or-kw))
                       (name type-or-kw))
                     "of")
                   closest-context args))]))
          inherit)]
    `(let [~@inherits-bindings]
       ~(expand-build-expr opts body))))

(defn ^:macro-support expand-bind [bind opts body]
  `(let [bindings# (atom ~(zipmap (keys bind) (for [v (vals bind)] `(ensure-model ~v))))]
     (cljd.flutter.alpha2/InheritedBindings. bindings# ~closest-context @bindings# ~(expand-build-expr opts body))))

(defn ^:macro-support expand-vsync [name opts body]
  `(reify :extends widgets/StatefulWidget
     :no-meta true
     (~'createState [_#]
      (reify :extends widgets/State
        :no-meta true
        (~'build [state# ~closest-context]
         (let [~name state#]
           ~(expand-build-expr opts body)))
        ^:mixin widgets/TickerProviderStateMixin))))

(defn ^:macro-support expand-debug [expr opts body]
  `(reify :extends widgets/StatelessWidget
     :no-meta true
     (~'build [_# ~closest-context] ~(expand-build-expr opts body))
     (~'debugFillProperties [this# props-builder#]
      (.debugFillProperties ^{:tag ~'super} this# props-builder#)
      ;; TODO: make expand-debug great again, maybe use Navigable ?
      (.add props-builder# (foundation/DiagnosticsNode.message (.toString  ~expr)))
      nil)))

(defn ^:macro-support expand-build-expr [opts body]
  (if-some [[[opt v] & opts] (seq opts)]
    (case opt
      :let `(let ~v ~(expand-build-expr opts body))
      :watch (expand-watch v opts body)
      :bind (expand-bind v opts body)
      :resources (expand-resources v opts body)
      :get (expand-get-inherited v opts body)
      :context `(let [~v ~closest-context]
                  ~(expand-build-expr opts body))
      :vsync (expand-vsync v opts body)
      :debug (expand-debug v opts body))
    `(nest ~@body)))

(defmacro widget
  "Takes a body evaluating to widget preceded by inline options.
   X :key expr (MUST appear as the first option), the widget's key.
   X :let bindings
   X :bind
   X :vsync
   X :get (né :inherit)
   X :resources
   X :watch
   X :debug
   X :context"
  [& body]
  (let [opts (take-while (comp keyword? first) (partition 2 body))
        body (drop (* 2 (count opts)) body)
        has-key (= :key (ffirst opts))
        [[_ key-expr] & opts] (cond->> opts (not has-key) (cons nil))]
    `(reify :extends (widgets/StatelessWidget
                         .key ~(when has-key `(foundation/ValueKey. ~key-expr)))
       :no-meta true
       (~'build [_# ~closest-context] ~(expand-build-expr opts body)))))

(defmacro build
  "Generates a so-called \"builder\" function, that is a widget-returning function which expects 1+ arguments, where the first argument is a BuildContext. (Such fns are expected for example as the .itemBuilder param to ListView/builder)
  `argsvec` is the argument vector, without the BuildContext. If argsvec is empty it can be omitted.
  After the `argsvec` comes a body, interpreted as per the `widget` macro."
  [argsvec? & body]
  (let [body (cond->> body (not (vector? argsvec?)) (cons argsvec?))
        opts (take-while (comp keyword? first) (partition 2 body))
        body (drop (* 2 (count opts)) body)]
    `(fn [~closest-context ~@(when (vector? argsvec?) argsvec?)]
       ~(expand-build-expr opts body))))
