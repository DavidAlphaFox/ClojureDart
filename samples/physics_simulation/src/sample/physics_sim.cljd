(ns sample.physics-sim
  "Faithful port of https://docs.flutter.dev/cookbook/animation/physics-simulation#interactive-example"
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:flutter/physics.dart" :as p]
   [cljd.flutter.alpha2 :as f]))

;; cgrand's notes: still a relative straight port, however I chose to differ from
;; the Dart code for the handling of the _animation field.
;; Dart code uses a single listener which has a ref to a late mutable field.
;; The invariants between the value of this field, the controller and
;; the gesture detector was implicit.
;; I preferred to create a new listener at each PanEnd which closes over the animation.

(defn draggable-card [& {:keys [child]}]
  (f/widget
    :vsync tick
    :get {{{:flds [width height]} .-size} m/MediaQuery}
    :managed [controller (m/AnimationController .vsync tick)]
    :let [drag-alignment (atom m/Alignment.center)]
    :watch [da drag-alignment]
    :let [run-animation
          (fn [^m/Offset px-per-s]
            (let [animation (.drive controller
                              (m/AlignmentTween
                                .begin da
                                .end m/Alignment.center))
                  units-per-s-x (/ (.-dx px-per-s) width)
                  units-per-s-y (/ (.-dy px-per-s) height)
                  units-per-s (m/Offset units-per-s-x units-per-s-y)
                  unit-velocity (.-distance units-per-s)
                  spring (p/SpringDescription
                           .mass 30
                           .stiffness 1
                           .damping 1)
                  simulation (p/SpringSimulation spring 0 1 (- unit-velocity))]
              (doto controller
                .clearListeners
                (.addListener #(reset! drag-alignment (.-value animation)))
                (.animateWith simulation))))]
    (m/GestureDetector
      .onPanDown (fn [details] (.stop controller) nil)
      .onPanUpdate (fn [{{:flds [dx dy]} .-delta :as ^m/DragUpdateDetails details}]
                     (swap! drag-alignment
                       #(.+ (m/Alignment
                              (/ dx (/ width 2))
                              (/ dy (/ height 2)))
                          %))
                     nil)
      .onPanEnd (fn [{{px-per-s .-pixelsPerSecond} .-velocity :as ^m/DragEndDetails details}]
                  (run-animation px-per-s)
                  nil))
    (m/Align .alignment da)
    m/Card
    child))

(def physics-card-demo
  (m/Scaffold
    .appBar (m/AppBar)
    .body (draggable-card :child (m/FlutterLogo .size 128))))

(defn main []
  (m/runApp (m/MaterialApp .home physics-card-demo)))
